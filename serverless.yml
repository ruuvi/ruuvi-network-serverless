# Ruuvi Network Serverless v1.1.0
#
# For full config options: docs.serverless.com

service: ruuvi-network-serverless
variablesResolutionMode: 20210326

plugins:
  - serverless-dynamodb-autoscaling
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}

  debugMode: ${self:custom.stage}-debugMode # Increased logging if 1

  # Kinesis mode
  #gatewayStream: ${self:custom.stage}-ruuvi-sensor-stream
  gatewayStream: ${self:custom.stage}-ruuvi-sensor-stream

  emailQueueName: ${self:custom.stage}-email-queue
  gatewayReceiverLambdaConcurrency: 100 # Separate due to higher requirements
  lambdaConcurrency: 10

  # Dynamo DB Tables
  dynamoSensorData: ${self:custom.stage}-SensorData # Main Sensor data
  dynamoSensorDataReduced: ${self:custom.stage}-SensorDataReduced
  dynamoGatewayWhitelist: ${self:custom.stage}-GatewayWhitelist
  sensorProfileBucket: ${self:custom.stage}-sensor-profile-pictures
  denseDataInterval: 60      # seconds between data points
  sparseDataInterval: 900      # seconds between data points
  gatewayThrottleInterval: 15  # seconds between gateway updates  
  rawDataTTL: 86400                 # 10800 = 3h, 86400 = 24h, 7776000 = 3 months
  verificationShortTokenLength: 4   # Length of the short verification token sent in the e-mail

  sourceEmailName: 'Ruuvi'
  sourceEmail: 'noreply@ruuvi.com'
  sourceDomain: 'https://station.ruuvi.com'
  invitationExpirationInterval: 5  # minutes after requested
  requireLoginForData: 1           # 1 for ENABLED
  gatewaySendRate: 60              # every X seconds
  gatewayEnforceSignature: 0       # 1 for ENABLED
  gatewayRequestTTL: 60000         # ms - how long is the request valid?

  dev-throttle-interval: 1
  prod-throttle-interval: 3600

  # Dynamo Auto-Scaling Configuration
  capacities:
    - table: DynamoSensorData  # Resource
      read:
        minimum: 25       # Minimum read capacity
        maximum: 100     # Maximum read capacity
        usage: 0.8        # Targeted usage percentage
      write:
        minimum: 15       # Minimum write capacity
        maximum: 200     # Maximum write capacity
        usage: 0.8        # Targeted usage percentage
    - table: DynamoSensorDataReduced  # Resource
      read:
        minimum: 15       # Minimum read capacity
        maximum: 50     # Maximum read capacity
        usage: 0.8        # Targeted usage percentage
      write:
        minimum: 15       # Minimum write capacity
        maximum: 50      # Maximum write capacity
        usage: 0.8        # Targeted usage percentage
    - table: DynamoGatewayWhitelist
      read:
        minimum: 25       # Minimum read capacity
        maximum: 100     # Maximum read capacity
        usage: 0.8        # Targeted usage percentage
      write:
        minimum: 15       # Minimum write capacity
        maximum: 30     # Maximum write capacity
        usage: 0.8        # Targeted usage percentage

  vpc:
    securityGroupIds:
      - ${ssm:${self:custom.stage}-ruuvi-redis-security-group-id}
    subnetIds:
      - ${ssm:${self:custom.stage}-ruuvi-redis-subnet-1}
      - ${ssm:${self:custom.stage}-ruuvi-redis-subnet-2}
      - ${ssm:${self:custom.stage}-ruuvi-redis-subnet-3}


provider:
  name: aws
  runtime: nodejs12.x
  profile: ruuvi
  vpc: ${self:custom.vpc}

  # Defaults
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  httpApi:
    cors: true

  # Permissions (Note: These could be more granular per lambda)
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
      Resource: { 'Fn::Join': [':', ['arn:aws:logs', { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, '*']] }
    - Effect: "Allow"
      Action:
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: { 'Fn::Join': [':', ['arn:aws:logs', { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, 'log-group:/aws/lambda/*writeToDatabase:*']]}
    - Effect: "Allow"
      Action:
        - "sqs:DeleteMessage"
        - "sqs:ReceiveMessage"
        - "sqs:SendMessage"
        - "sqs:GetQueueAttributes"
      Resource: "arn:aws:sqs:*"
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:DeleteItem"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:Scan"
        - "dynamodb:UpdateItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
      Resource: { 'Fn::Join': [':', ['arn:aws:dynamodb', { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, 'table/*']] }
    - Effect: "Allow"
      Action:
        - "ses:SendTemplatedEmail"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:custom.sensorProfileBucket}/*"
    - Effect: "Allow"
      Action:
        - "kinesis:DescribeStream"
        - "kinesis:DescribeStreamSummary"
        - "kinesis:GetRecords"
        - "kinesis:GetShardIterator"
        - "kinesis:ListShards"
        - "kinesis:ListStreams"
        - "kinesis:SubscribeToShard"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "kinesis:PutRecord"
        - "kinesis:PutRecords"
      Resource: { 'Fn::Join': [':', ['arn:aws:kinesis', { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, 'stream/${self:custom.gatewayStream}']] }

# Lambdas
functions:
  # Gateway Facing API

  # Gateway update receiver that forwards to Kinesis
  gatewayReceiver:
    handler: GatewayApi/gatewayReceiver.handler
    #reservedConcurrency: ${self:custom.gatewayReceiverLambdaConcurrency}
    events:
      - httpApi:
          method: POST
          path: /record
    environment:
      DEBUG_MODE: ${self:custom.debugMode}
      STREAM_NAME: ${self:custom.gatewayStream}
      GATEWAY_SEND_RATE: ${self:custom.gatewaySendRate}
      ENFORCE_SIGNATURE: ${self:custom.gatewayEnforceSignature}
      GATEWAY_REQUEST_TTL: ${self:custom.gatewayRequestTTL}
      WHITELIST_TABLE_NAME: ${self:custom.dynamoGatewayWhitelist}
      REDIS_HOST: ${ssm:${self:custom.stage}-ruuvi-redis-host}
      GATEWAY_THROTTLE_INTERVAL: ${self:custom.gatewayThrottleInterval}
      MINIMUM_SENSOR_THROTTLE_INTERVAL: ${self:custom.denseDataInterval}
      EMAIL_QUEUE: { Ref: EmailQueue }
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNATURE_HEADER_NAME: 'Ruuvi-HMAC-SHA256'
      ALERT_THROTTLE_INTERVAL: ${self:custom.${self:custom.stage}-throttle-interval}

  # Gateway update receiver that forwards to external service
  status:
    handler: GatewayApi/gatewayStatus.handler
    vpc:
      securityGroupIds: []
      subnetIds: []
    events:
      - httpApi:
          method: POST
          path: /status
    environment:
      STATUS_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-status-endpoint}

  writeToDatabase:
    handler: GatewayApi/writeToDatabase.handler
    timeout: 60
    events:
      - stream:
          type: kinesis
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - kinesis
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - stream/${self:custom.gatewayStream}
          batchSize: 1000
          startingPosition: LATEST
          maximumRetryAttempts: 3
          enabled: true
    environment:
      TABLE_NAME: ${self:custom.dynamoSensorData}
      MAXIMUM_STORAGE_INTERVAL: ${self:custom.denseDataInterval}
      DATA_TTL: ${self:custom.rawDataTTL}
      REDIS_HOST: ${ssm:${self:custom.stage}-ruuvi-redis-host}
      EMAIL_QUEUE: { Ref: EmailQueue }
      WHITELIST_TABLE_NAME: ${self:custom.dynamoGatewayWhitelist}

  writeToSparseDatabase:
    handler: GatewayApi/writeToDatabase.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - kinesis
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - stream/${self:custom.gatewayStream}
          batchSize: 1000
          startingPosition: LATEST
          maximumRetryAttempts: 3
          enabled: true
    environment:
      TABLE_NAME: ${self:custom.dynamoSensorDataReduced}
      MAXIMUM_STORAGE_INTERVAL: ${self:custom.sparseDataInterval}
      DATA_TTL: 0
      REDIS_HOST: ${ssm:${self:custom.stage}-ruuvi-redis-host}
      EMAIL_QUEUE: { Ref: EmailQueue }

  # User Facing API
  getSensorData:
    handler: UserApi/getSensorData.handler
    events:
      - httpApi:
          method: GET
          path: /get
          #payload: '2.0'
    environment:
      DEBUG: 1
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      TABLE_NAME: ${self:custom.dynamoSensorData}
      REDUCED_TABLE_NAME: ${self:custom.dynamoSensorDataReduced}
      RAW_DATA_TTL: ${self:custom.rawDataTTL}
      REQUIRE_LOGIN: ${self:custom.requireLoginForData}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}
      DEFAULT_RESULTS: 15
      MAX_RESULTS: 144000

  getUserData:
    handler: UserApi/getUserData.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: GET
          path: /user
          #payload: '2.0'
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}

  getUserSettings:
    handler: UserApi/getUserSettings.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: GET
          path: /settings
          #payload: '2.0'
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}

  setUserSettings:
    handler: UserApi/setUserSetting.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: POST
          path: /settings
          #payload: '2.0'
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}

  requestRegistration:
    handler: UserApi/requestRegistration.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: POST
          path: /register
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}
      INVITATION_EXPIRATION_INTERVAL: ${self:custom.invitationExpirationInterval}
      EMAIL_QUEUE: { Ref: EmailQueue }
      SOURCE_DOMAIN: ${self:custom.sourceDomain}
      VERIFICATION_SHORT_TOKEN_LENGTH: ${self:custom.verificationShortTokenLength}
      INTERNAL_API_KEY: ${ssm:${self:custom.stage}-ruuvi-internal-api-key}
      BASE_API_URL:
        !Join
          - ''
          - - 'https://'
            - !Ref HttpApi
            - '.execute-api.'
            - ${opt:region, self:provider.region}
            - '.'
            - !Ref AWS::URLSuffix

  verifyUser:
    handler: UserApi/verifyUser.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: GET
          path: /verify
          #payload: '2.0'
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}

  claimSensor:
    handler: UserApi/claimSensor.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: POST
          path: /claim
          #payload: '2.0'
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}

  unclaimSensor:
    handler: UserApi/unclaimSensor.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: POST
          path: /unclaim
          #payload: '2.0'
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}
      REDIS_HOST: ${ssm:${self:custom.stage}-ruuvi-redis-host}
      EMAIL_QUEUE: { Ref: EmailQueue }

  shareSensor:
    handler: UserApi/shareSensor.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: POST
          path: /share
          #payload: '2.0'
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}
      EMAIL_QUEUE: { Ref: EmailQueue }
      TABLE_NAME: ${self:custom.dynamoSensorData}
      BASE_API_URL:
        !Join
          - ''
          - - 'https://'
            - !Ref HttpApi
            - '.execute-api.'
            - ${opt:region, self:provider.region}
            - '.'
            - !Ref AWS::URLSuffix

  unshareSensor:
    handler: UserApi/unshareSensor.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: POST
          path: /unshare
          #payload: '2.0'
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}
      EMAIL_QUEUE: { Ref: EmailQueue }

  getSharedSensors:
    handler: UserApi/getShared.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: GET
          path: /shared
          #payload: '2.0'
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}

  getSensorList:
    handler: UserApi/getSensorList.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - httpApi:
          method: GET
          path: /sensors
          #payload: '2.0'
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}
      TABLE_NAME: ${self:custom.dynamoSensorData}

  # Sensor profile + picture updates
  updateSensor:
    handler: UserApi/updateSensor.handler
    events:
      - httpApi:
          method: POST
          path: /update
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}

  uploadSensorPicture:
    handler: UserApi/uploadSensorPicture.handler
    events:
      - httpApi:
          method: POST
          path: /upload
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}
      BUCKET_NAME: ${self:custom.sensorProfileBucket}
      BUCKET_URL:
        !Join
          - ''
          - - 'https://'
            - ${self:custom.sensorProfileBucket}
            - '.s3.'
            - ${opt:region, self:provider.region}
            - '.'
            - !Ref AWS::URLSuffix

  # Alerts
  setAlert:
    handler: UserApi/setAlert.handler
    events:
      - httpApi:
          method: POST
          path: /alerts
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      TABLE_NAME: ${self:custom.dynamoSensorData}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}
      REDIS_HOST: ${ssm:${self:custom.stage}-ruuvi-redis-host}
      ALERT_THROTTLE_INTERVAL: ${self:custom.${self:custom.stage}-throttle-interval}

  getAlert:
    handler: UserApi/getAlerts.handler
    events:
      - httpApi:
          method: GET
          path: /alerts
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      SIGNING_SECRET: ${ssm:${self:custom.stage}-ruuvi-signing-secret}
      REDIS_HOST: ${ssm:${self:custom.stage}-ruuvi-redis-host}

  emailSender:
    handler: services/emailSender.handler
    vpc:
      securityGroupIds: []
      subnetIds: []
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EmailQueue
              - Arn
          batchSize: 1
    environment:
      SOURCE_STAGE: ${self:custom.stage}
      SOURCE_EMAIL_NAME: ${self:custom.sourceEmailName}
      SOURCE_EMAIL: ${self:custom.sourceEmail}
      SOURCE_DOMAIN: ${self:custom.sourceDomain}
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}


  # NOTE: Workaround for CORS preflight requests
  corsOptions:
    handler: UserApi/corsHelper.handler
    events:
      - httpApi:
          method: OPTIONS
          path: /register
      - httpApi:
          method: OPTIONS
          path: /claim
      - httpApi:
          method: OPTIONS
          path: /unclaim
      - httpApi:
          method: OPTIONS
          path: /share
      - httpApi:
          method: OPTIONS
          path: /shared
      - httpApi:
          method: OPTIONS
          path: /unshare
      - httpApi:
          method: OPTIONS
          path: /update
      - httpApi:
          method: OPTIONS
          path: /upload
      - httpApi:
          method: OPTIONS
          path: /verify
      - httpApi:
          method: OPTIONS
          path: /whitelist
      - httpApi:
          method: OPTIONS
          path: /get
      - httpApi:
          method: OPTIONS
          path: /user
      - httpApi:
          method: OPTIONS
          path: /apple-app-site-association
      - httpApi:
          method: OPTIONS
          path: /sensors

  # INTERNAL API
  whitelist:
    handler: InternalApi/whitelist.handler
    events:
      - httpApi:
          method: POST
          path: /whitelist
    environment:
      INTERNAL_API_KEY: ${ssm:${self:custom.stage}-ruuvi-internal-api-key}
      WHITELIST_TABLE_NAME: ${self:custom.dynamoGatewayWhitelist}
      REDIS_HOST: ${ssm:${self:custom.stage}-ruuvi-redis-host}

  blacklist:
    handler: InternalApi/blacklist.handler
    events:
      - httpApi:
          method: POST
          path: /blacklist
    environment:
      INTERNAL_API_KEY: ${ssm:${self:custom.stage}-ruuvi-internal-api-key}
      WHITELIST_TABLE_NAME: ${self:custom.dynamoGatewayWhitelist}
      REDIS_HOST: ${ssm:${self:custom.stage}-ruuvi-redis-host}


  gatewayInfo:
    handler: InternalApi/gatewayInfo.handler
    events:
      - httpApi:
          method: GET
          path: /gwinfo
    environment:
      INTERNAL_API_KEY: ${ssm:${self:custom.stage}-ruuvi-internal-api-key}
      WHITELIST_TABLE_NAME: ${self:custom.dynamoGatewayWhitelist}
      REDIS_HOST: ${ssm:${self:custom.stage}-ruuvi-redis-host}

  appleVerification:
    handler: InternalApi/appleVerification.handler
    events:
      - httpApi:
          method: GET
          path: /apple-app-site-association
    environment:
      APP_ID: ${ssm:apple-app-site-association-id}

  # SERVICES AND MAINTENANCE
  tokenInvalidator:
    handler: services/tokenInvalidator.handler
    events:
      - schedule:
          name: ${self:custom.stage}-Access-Token-Clean-Up-Timer
          description: 'Triggers access token clean up periodically.'
          rate: rate(1 hour)
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      MAX_TOKEN_AGE: 180 # Days

  alertCacheCleaner:
    handler: services/alertCacheCleaner.handler
    events:
      - schedule:
          name: ${self:custom.stage}-Alert-Cache-Clean-Up-Timer
          description: 'Triggers alert cache refresh periodically.'
          rate: rate(1 hour)
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}
      REDIS_HOST: ${ssm:${self:custom.stage}-ruuvi-redis-host}

  metricsProducer:
    handler: services/metricsProducer.handler
    events:
      - schedule:
          name: ${self:custom.stage}-Metrics-Producer-Timer
          description: 'Triggers production of metrics periodically.'
          rate: rate(1 hour)
    environment:
      DATABASE_USERNAME: ${ssm:${self:custom.stage}-ruuvi-db-username}
      DATABASE_PASSWORD: ${ssm:${self:custom.stage}-ruuvi-db-password}
      DATABASE_ENDPOINT: ${ssm:${self:custom.stage}-ruuvi-db-endpoint}
      DATABASE_NAME: ${ssm:${self:custom.stage}-ruuvi-db-database}

# Resources (queues, databases, etc.)
resources:
  Resources:
    DynamoSensorData:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoSensorData}
        AttributeDefinitions:
          - AttributeName: SensorId
            AttributeType: S
          - AttributeName: MeasurementTimestamp
            AttributeType: N
        KeySchema:
          - AttributeName: SensorId
            KeyType: HASH
          - AttributeName: MeasurementTimestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5 # Defaults, using auto-scaling by default
          WriteCapacityUnits: 5
        TimeToLiveSpecification:
          AttributeName: TimeToLive
          Enabled: TRUE
    DynamoSensorDataReduced:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoSensorDataReduced}
        AttributeDefinitions:
          - AttributeName: SensorId
            AttributeType: S
          - AttributeName: MeasurementTimestamp
            AttributeType: N
        KeySchema:
          - AttributeName: SensorId
            KeyType: HASH
          - AttributeName: MeasurementTimestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5 # Defaults, using auto-scaling by default
          WriteCapacityUnits: 5

    # Alert resources and policies
    DynamoGatewayWhitelist:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoGatewayWhitelist}
        AttributeDefinitions:
          - AttributeName: GatewayId
            AttributeType: S
        KeySchema:
          - AttributeName: GatewayId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5 # Defaults, using auto-scaling by default
          WriteCapacityUnits: 5
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.sensorProfileBucket}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"
    EmailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.emailQueueName}
